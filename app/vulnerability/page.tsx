"use client";
import Navbar from "@/components/Navbar";
import Footer from "@/components/Footer";
import AnimatedBG from "@/components/AnimatedBG";
import { motion } from "framer-motion";
import { Shield, AlertTriangle, CheckCircle, XCircle, Upload, FileText, Scan, Clock } from "lucide-react";
import { useState, useEffect } from "react";
import { useAuth } from "@/hooks/useAuth";
import { useRouter } from "next/navigation";
import Link from "next/link";

interface Issue {
  id: string;
  level: string;
  title: string;
  package: string | null;
  specifier: string | null;
  details: string;
  description: string;
  remediation: string;
  cve_id: string | null;
  fixed_in: string | null;
}

interface UserLimits {
  user_id: string;
  limits: {
    max_files_per_user: number;
    max_lines_per_user: number;
    files_used: number;
    lines_used: number;
    files_remaining: number;
    lines_remaining: number;
    reset_date: string;
  };
  can_analyze: boolean;
  limit_message: string;
}

interface ScanResponse {
  file_name: string;
  language: string;
  lines_analyzed: number;
  vulnerabilities_found: number;
  issues: Issue[];
  analysis_timestamp: string;
  user_limits: UserLimits;
}

export default function VulnerabilityPage() {
  const [isScanning, setIsScanning] = useState(false);
  const [scanResults, setScanResults] = useState<ScanResponse | null>(null);
  const [uploadedFile, setUploadedFile] = useState<File | null>(null);
  const [userLimits, setUserLimits] = useState<UserLimits | null>(null);
  const [error, setError] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  
  const { isAuthenticated, user } = useAuth();
  const router = useRouter();

  useEffect(() => {
    // Check authentication status
    const checkAuth = () => {
      if (!isAuthenticated) {
        router.push('/signin');
        return;
      }
      setIsLoading(false);
    };

    // Small delay to allow auth state to initialize
    const timer = setTimeout(checkAuth, 100);
    return () => clearTimeout(timer);
  }, [isAuthenticated, router]);

  // Show loading state while checking authentication
  if (isLoading) {
    return (
      <div className="min-h-screen flex flex-col">
        <Navbar />
        <main className="relative isolate flex-1 py-16 sm:py-24 overflow-hidden">
          <AnimatedBG />
          <div className="mx-auto max-w-6xl px-4 sm:px-6 lg:px-8">
            <div className="text-center">
              <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-brand-500 mx-auto"></div>
              <p className="mt-4 text-neutral-300">Loading...</p>
            </div>
          </div>
        </main>
        <Footer />
      </div>
    );
  }

  // Show sign-in prompt if not authenticated
  if (!isAuthenticated) {
    return (
      <div className="min-h-screen flex flex-col">
        <Navbar />
        <main className="relative isolate flex-1 py-16 sm:py-24 overflow-hidden">
          <AnimatedBG />
          <div className="mx-auto max-w-6xl px-4 sm:px-6 lg:px-8">
            <div className="text-center max-w-3xl mx-auto">
              <motion.div
                initial={{ opacity: 0, y: 10 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.6 }}
                className="inline-flex items-center gap-2 rounded-full border border-red-500/20 bg-red-500/10 px-3 py-1 text-xs text-red-300"
              >
                <Shield className="h-3 w-3" />
                Authentication Required
              </motion.div>
              
              <motion.h1
                initial={{ opacity: 0, y: 10 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.6, delay: 0.1 }}
                className="mt-4 text-4xl sm:text-5xl font-semibold tracking-tight"
              >
                Sign In Required
              </motion.h1>
              
              <motion.p
                initial={{ opacity: 0, y: 10 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.6, delay: 0.15 }}
                className="mt-4 text-neutral-300"
              >
                You need to sign in to access the vulnerability scanner. This helps us track your usage limits and provide personalized security analysis.
              </motion.p>

              <motion.div
                initial={{ opacity: 0, y: 10 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.6, delay: 0.2 }}
                className="mt-8 flex items-center justify-center gap-3"
              >
                <Link href="/signin" className="rounded-md bg-brand-500 hover:bg-brand-400 px-6 py-3 font-medium text-white transition">
                  Sign In
                </Link>
                <Link href="/signup" className="rounded-md bg-white/10 hover:bg-white/20 px-6 py-3 font-medium transition">
                  Create Account
                </Link>
              </motion.div>
            </div>
          </div>
        </main>
        <Footer />
      </div>
    );
  }

  const vulnerabilityTypes = [
    { icon: Shield, title: "Security Vulnerabilities", desc: "Detect known security flaws and CVEs in your dependencies" },
    { icon: AlertTriangle, title: "Code Quality Issues", desc: "Identify potential bugs and code smells that could lead to vulnerabilities" },
    { icon: FileText, title: "Configuration Risks", desc: "Scan for misconfigurations that could expose your application" },
    { icon: CheckCircle, title: "Compliance Checks", desc: "Ensure your code meets security standards and best practices" },
  ];

  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      setUploadedFile(file);
      setError(null);
    }
  };

  // Process API response to get vulnerability counts by severity
  const getVulnerabilityCounts = (issues: Issue[]) => {
    const counts = {
      critical: 0,
      high: 0,
      medium: 0,
      low: 0,
      info: 0,
      total: issues.length
    };

    issues.forEach(issue => {
      switch (issue.level.toLowerCase()) {
        case 'critical':
          counts.critical++;
          break;
        case 'high':
          counts.high++;
          break;
        case 'medium':
          counts.medium++;
          break;
        case 'low':
          counts.low++;
          break;
        case 'info':
          counts.info++;
          break;
      }
    });

    return counts;
  };

  const startScan = async () => {
    if (!uploadedFile) return;
    
    setIsScanning(true);
    setError(null);
    
    // Show loading screen for 5 seconds
    await new Promise(resolve => setTimeout(resolve, 5000));
    
    try {
      // Get JWT token from localStorage
      const token = localStorage.getItem('access_token');
      const tokenType = localStorage.getItem('token_type') || 'bearer';
      
      if (!token) {
        throw new Error('Authentication required. Please sign in again.');
      }
      
      const formData = new FormData();
      formData.append('code_file', uploadedFile);
      formData.append('max_lines', '500');
      
      console.log('Sending request to API with file:', uploadedFile.name);
      
      const response = await fetch('http://localhost:8000/api/code/analyze', {
        method: 'POST',
        headers: {
          'Authorization': `${tokenType} ${token}`
        },
        body: formData,
        mode: 'cors',
        credentials: 'omit',
      });
      
      console.log('Response status:', response.status);
      console.log('Response headers:', response.headers);
      
      if (!response.ok) {
        const errorText = await response.text();
        console.error('API Error Response:', errorText);
        
        // Try to parse JSON error response
        let errorMessage = `HTTP error! status: ${response.status}`;
        try {
          const errorData = JSON.parse(errorText);
          
          // Handle authentication errors specifically
          if (response.status === 401) {
            // Clear invalid token and redirect to sign in
            localStorage.removeItem('access_token');
            localStorage.removeItem('token_type');
            errorMessage = 'Your session has expired. Please sign in again.';
          } else if (errorData.detail && errorData.detail.message) {
            errorMessage = errorData.detail.message;
          } else if (errorData.message) {
            errorMessage = errorData.message;
          } else if (errorData.detail) {
            errorMessage = errorData.detail;
          }
          
          // If there are user_limits in the error, update them
          if (errorData.user_limits) {
            setUserLimits(errorData.user_limits);
          }
        } catch (parseError) {
          // Handle authentication errors even if JSON parsing fails
          if (response.status === 401) {
            localStorage.removeItem('access_token');
            localStorage.removeItem('token_type');
            errorMessage = 'Your session has expired. Please sign in again.';
          } else {
            // If parsing fails, use the raw error text
            errorMessage = errorText;
          }
        }
        
        throw new Error(errorMessage);
      }
      
      const data = await response.json();
      console.log('API Response Data:', data);
      
      setScanResults(data);
      setUserLimits(data.user_limits);
      
      console.log('State updated - scanResults:', data);
      console.log('State updated - userLimits:', data.user_limits);
      
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'Failed to analyze file. Please try again.';
      setError(errorMessage);
      console.error('Scan error:', err);
    } finally {
      setIsScanning(false);
    }
  };

  return (
    <div className="min-h-screen flex flex-col">
      <Navbar />
      <main className="relative isolate flex-1 py-16 sm:py-24 overflow-hidden">
        <AnimatedBG />
        <div className="mx-auto max-w-6xl px-4 sm:px-6 lg:px-8">
          {/* Hero */}
          <div className="text-center max-w-3xl mx-auto">
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              whileInView={{ opacity: 1, y: 0 }}
              viewport={{ once: true }}
              transition={{ duration: 0.6 }}
              className="text-center"
            >
              {/* Testing Phase Banner */}
              <div className="inline-flex items-center gap-2 px-3 py-1 rounded-full bg-orange-500/20 border border-orange-500/30 text-orange-300 text-sm font-medium mb-4">
                <div className="w-2 h-2 rounded-full bg-orange-400 animate-pulse"></div>
                Testing Phase - Beta Version
              </div>
              
              <h1 className="text-4xl sm:text-5xl lg:text-6xl font-semibold tracking-tight mb-4">
                Vulnerability Scanner
              </h1>
            </motion.div>

            <motion.p
              initial={{ opacity: 0, y: 10 }}
              whileInView={{ opacity: 1, y: 0 }}
              viewport={{ once: true }}
              transition={{ duration: 0.6, delay: 0.2 }}
              className="mt-4 text-neutral-300"
            >
              Upload your project files and get comprehensive security analysis. Detect vulnerabilities, 
              security risks, and compliance issues before deployment.
            </motion.p>
          </div>

          {/* Upload Section */}
          <motion.section
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            viewport={{ once: true }}
            transition={{ duration: 0.6, delay: 0.2 }}
            className="mt-12"
          >
            <div className="rounded-xl border border-white/10 bg-white/5 p-8">
              <div className="text-center">
                <div className="mx-auto w-16 h-16 rounded-full bg-red-500/20 flex items-center justify-center mb-4">
                  <Upload className="h-8 w-8 text-red-300" />
                </div>
                <h2 className="text-xl font-semibold mb-2">Upload Your Project</h2>
                <p className="text-neutral-300 text-sm mb-4">
                  Upload your source code, package.json, or project archive for analysis
                </p>
                
                {/* User Limits Display */}
                {userLimits && (
                  <div className="mb-6 p-4 rounded-lg border border-blue-500/20 bg-blue-500/10">
                    <div className="flex items-center justify-between text-sm">
                      <div className="flex items-center gap-4">
                        <div className="text-blue-300">
                          <span className="font-medium">Files:</span> {userLimits.limits.files_remaining}/{userLimits.limits.max_files_per_user} remaining
                        </div>
                        <div className="text-blue-300">
                          <span className="font-medium">Lines:</span> {userLimits.limits.lines_remaining}/{userLimits.limits.max_lines_per_user} remaining
                        </div>
                      </div>
                      <div className="text-xs text-blue-400">
                        Resets: {new Date(userLimits.limits.reset_date).toLocaleDateString()}
                      </div>
                    </div>
                    {!userLimits.can_analyze && (
                      <div className="mt-2 text-xs text-orange-400">
                        {userLimits.limit_message}
                      </div>
                    )}
                  </div>
                )}

                {/* Error Display */}
                {error && (
                  <div className="mb-6 p-4 rounded-lg border border-red-500/20 bg-red-500/10">
                    <div className="flex items-start gap-3">
                      <XCircle className="h-5 w-5 text-red-400 mt-0.5 flex-shrink-0" />
                      <div>
                        <div className="text-sm font-medium text-red-300 mb-1">Analysis Failed</div>
                        <div className="text-sm text-red-200">{error}</div>
                        {userLimits && !userLimits.can_analyze && (
                          <div className="mt-3 p-3 rounded-md bg-orange-500/10 border border-orange-500/20">
                            <div className="text-xs text-orange-300 font-medium mb-1">Usage Limits:</div>
                            <div className="text-xs text-orange-200 space-y-1">
                              <div>Files: {userLimits.limits.files_used}/{userLimits.limits.max_files_per_user} used ({userLimits.limits.files_remaining} remaining)</div>
                              <div>Lines: {userLimits.limits.lines_used}/{userLimits.limits.max_lines_per_user} used ({userLimits.limits.lines_remaining} remaining)</div>
                              <div>Resets: {new Date(userLimits.limits.reset_date).toLocaleDateString()}</div>
                            </div>
                            {userLimits.limit_message && (
                              <div className="mt-2 text-xs text-orange-400 font-medium">
                                {userLimits.limit_message}
                              </div>
                            )}
                          </div>
                        )}
                      </div>
                    </div>
                  </div>
                )}
                
                <div className="border-2 border-dashed border-white/20 rounded-lg p-8 hover:border-white/30 transition-colors">
                  <input
                    type="file"
                    onChange={handleFileUpload}
                    accept=".zip,.tar.gz,.json,.js,.ts,.tsx,.jsx,.py,.java,.go"
                    className="hidden"
                    id="file-upload"
                  />
                  <label htmlFor="file-upload" className="cursor-pointer">
                    <div className="text-center">
                      <FileText className="mx-auto h-12 w-12 text-neutral-400 mb-4" />
                      <p className="text-neutral-300">
                        {uploadedFile ? uploadedFile.name : "Click to upload or drag and drop"}
                      </p>
                      <p className="text-xs text-neutral-400 mt-2">
                        Supports ZIP, TAR.GZ, JSON, JS, TS, Python, Java, Go files
                      </p>
                    </div>
                  </label>
                </div>

                {uploadedFile && (
                  <button
                    onClick={startScan}
                    disabled={isScanning}
                    className="mt-6 rounded-md bg-red-600 hover:bg-red-500 disabled:bg-red-600/50 px-6 py-3 font-medium text-white transition flex items-center gap-2 mx-auto"
                  >
                    {isScanning ? (
                      <>
                        <Clock className="h-4 w-4 animate-spin" />
                        Scanning...
                      </>
                    ) : (
                      <>
                        <Scan className="h-4 w-4" />
                        Start Security Scan
                      </>
                    )}
                  </button>
                )}
              </div>
            </div>
          </motion.section>

          {/* Debug Info */}
          {process.env.NODE_ENV === 'development' && (
            <div className="mt-8 p-4 bg-yellow-500/10 border border-yellow-500/20 rounded-lg">
              <h3 className="text-yellow-300 font-medium mb-2">Debug Info:</h3>
              <div className="text-xs text-yellow-200 space-y-1">
                <div>scanResults: {scanResults ? 'Present' : 'Null'}</div>
                <div>userLimits: {userLimits ? 'Present' : 'Null'}</div>
                <div>isScanning: {isScanning ? 'True' : 'False'}</div>
                <div>error: {error || 'None'}</div>
                {scanResults && (
                  <div>Issues count: {scanResults.issues?.length || 0}</div>
                )}
              </div>
            </div>
          )}

          {/* Results Section */}
          {scanResults && (
            <motion.section
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.6 }}
              className="mt-14"
            >
              <h2 className="text-2xl font-semibold tracking-tight text-center mb-8">Scan Results</h2>
              
              {/* File Info */}
              <div className="mb-6 p-4 rounded-lg border border-white/10 bg-white/5">
                <div className="flex items-center justify-between text-sm">
                  <div className="flex items-center gap-4">
                    <div className="text-neutral-300">
                      <span className="font-medium">File:</span> {scanResults.file_name}
                    </div>
                    <div className="text-neutral-300">
                      <span className="font-medium">Language:</span> {scanResults.language}
                    </div>
                    <div className="text-neutral-300">
                      <span className="font-medium">Lines Analyzed:</span> {scanResults.lines_analyzed}
                    </div>
                    <div className="text-neutral-300">
                      <span className="font-medium">Actual Vulnerabilities:</span> {(() => {
                        const counts = getVulnerabilityCounts(scanResults.issues);
                        return counts.critical + counts.high + counts.medium + counts.low;
                      })()}
                    </div>
                  </div>
                  <div className="text-xs text-neutral-400">
                    {new Date(scanResults.analysis_timestamp).toLocaleString()}
                  </div>
                </div>
              </div>
              
              {/* Summary Cards */}
              <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-4 mb-8">
                {(() => {
                  const counts = getVulnerabilityCounts(scanResults.issues);
                  return (
                    <>
                      <div className="rounded-lg border border-red-500/20 bg-red-500/10 p-4 text-center">
                        <div className="text-2xl font-bold text-red-400">{counts.critical}</div>
                        <div className="text-xs text-red-300">Critical</div>
                      </div>
                      <div className="rounded-lg border border-orange-500/20 bg-orange-500/10 p-4 text-center">
                        <div className="text-2xl font-bold text-orange-400">{counts.high}</div>
                        <div className="text-xs text-orange-300">High</div>
                      </div>
                      <div className="rounded-lg border border-yellow-500/20 bg-yellow-500/10 p-4 text-center">
                        <div className="text-2xl font-bold text-yellow-400">{counts.medium}</div>
                        <div className="text-xs text-yellow-300">Medium</div>
                      </div>
                      <div className="rounded-lg border border-blue-500/20 bg-blue-500/10 p-4 text-center">
                        <div className="text-2xl font-bold text-blue-400">{counts.low}</div>
                        <div className="text-xs text-blue-300">Low</div>
                      </div>
                      <div className="rounded-lg border border-gray-500/20 bg-gray-500/10 p-4 text-center">
                        <div className="text-2xl font-bold text-gray-400">{counts.info}</div>
                        <div className="text-xs text-gray-300">Info</div>
                      </div>
                      <div className="rounded-lg border border-white/20 bg-white/5 p-4 text-center">
                        <div className="text-2xl font-bold text-white">{counts.total}</div>
                        <div className="text-xs text-neutral-300">Total</div>
                      </div>
                    </>
                  );
                })()}
              </div>

              {/* Detailed Results */}
              <div className="rounded-xl border border-white/10 bg-white/5 p-6">
                <h3 className="text-lg font-semibold mb-4 flex items-center gap-2">
                  {(() => {
                    const counts = getVulnerabilityCounts(scanResults.issues);
                    const actualVulns = counts.critical + counts.high + counts.medium + counts.low;
                    return actualVulns > 0 ? (
                      <AlertTriangle className="h-5 w-5 text-red-400" />
                    ) : (
                      <CheckCircle className="h-5 w-5 text-green-400" />
                    );
                  })()}
                  {(() => {
                    const counts = getVulnerabilityCounts(scanResults.issues);
                    const actualVulns = counts.critical + counts.high + counts.medium + counts.low;
                    return actualVulns > 0 
                      ? `Security Issues (${actualVulns} vulnerabilities, ${counts.info} info)`
                      : `Analysis Complete (${counts.info} informational messages)`;
                  })()}
                </h3>
                
                <div className="space-y-4">
                  {scanResults.issues.map((issue, index) => {
                    const getSeverityColor = (level: string) => {
                      switch (level.toLowerCase()) {
                        case 'critical':
                          return { border: 'border-red-500/20', bg: 'bg-red-500/5', text: 'text-red-300', icon: 'text-red-400' };
                        case 'high':
                          return { border: 'border-orange-500/20', bg: 'bg-orange-500/5', text: 'text-orange-300', icon: 'text-orange-400' };
                        case 'medium':
                          return { border: 'border-yellow-500/20', bg: 'bg-yellow-500/5', text: 'text-yellow-300', icon: 'text-yellow-400' };
                        case 'low':
                          return { border: 'border-blue-500/20', bg: 'bg-blue-500/5', text: 'text-blue-300', icon: 'text-blue-400' };
                        case 'info':
                          return { border: 'border-green-500/20', bg: 'bg-green-500/5', text: 'text-green-300', icon: 'text-green-400' };
                        default:
                          return { border: 'border-gray-500/20', bg: 'bg-gray-500/5', text: 'text-gray-300', icon: 'text-gray-400' };
                      }
                    };

                    const colors = getSeverityColor(issue.level);
                    const IconComponent = issue.level.toLowerCase() === 'info' ? CheckCircle : 
                                        issue.level.toLowerCase() === 'critical' ? XCircle : AlertTriangle;

                    return (
                      <div key={index} className={`p-6 rounded-lg border ${colors.border} ${colors.bg}`}>
                        <div className="flex items-start justify-between">
                          <div className="flex items-start gap-4 flex-1">
                            <IconComponent className={`h-6 w-6 ${colors.icon} mt-1 flex-shrink-0`} />
                            <div className="flex-1 space-y-3">
                              <div className="flex items-center gap-3">
                                <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium uppercase tracking-wide ${colors.bg} ${colors.text} border ${colors.border}`}>
                                  {issue.level}
                                </span>
                                <h4 className={`text-lg font-semibold ${colors.text}`}>
                                  {issue.title}
                                </h4>
                              </div>
                              
                              {issue.description && (
                                <div className="text-sm text-neutral-300 leading-relaxed">
                                  {issue.description}
                                </div>
                              )}
                              
                              {issue.details && (
                                <div className="bg-neutral-800/50 rounded-md p-3 border border-white/5">
                                  <div className="text-xs font-medium text-neutral-400 uppercase tracking-wide mb-2">Details</div>
                                  <div className="text-sm text-neutral-300 leading-relaxed">
                                    {issue.details}
                                  </div>
                                </div>
                              )}
                              
                              {issue.remediation && (
                                <div className="bg-green-500/10 rounded-md p-3 border border-green-500/20">
                                  <div className="text-xs font-medium text-green-400 uppercase tracking-wide mb-2">Recommended Fix</div>
                                  <div className="text-sm text-green-300 leading-relaxed">
                                    {issue.remediation}
                                  </div>
                                </div>
                              )}
                            </div>
                          </div>
                          
                          <div className="flex flex-col gap-2 ml-6">
                            {issue.cve_id && (
                              <div className="text-right">
                                <div className="text-xs font-medium text-neutral-400 uppercase tracking-wide mb-1">CVE ID</div>
                                <span className="inline-flex items-center px-2.5 py-1 rounded-md text-xs font-mono bg-red-500/20 text-red-300 border border-red-500/30">
                                  {issue.cve_id}
                                </span>
                              </div>
                            )}
                            {issue.package && (
                              <div className="text-right">
                                <div className="text-xs font-medium text-neutral-400 uppercase tracking-wide mb-1">Package</div>
                                <span className="inline-flex items-center px-2.5 py-1 rounded-md text-xs font-mono bg-blue-500/20 text-blue-300 border border-blue-500/30">
                                  {issue.package}
                                </span>
                              </div>
                            )}
                            {issue.fixed_in && (
                              <div className="text-right">
                                <div className="text-xs font-medium text-neutral-400 uppercase tracking-wide mb-1">Fixed In</div>
                                <span className="inline-flex items-center px-2.5 py-1 rounded-md text-xs font-mono bg-green-500/20 text-green-300 border border-green-500/30">
                                  {issue.fixed_in}
                                </span>
                              </div>
                            )}
                          </div>
                        </div>
                      </div>
                    );
                  })}
                </div>

              </div>
            </motion.section>
          )}

          {/* Scan Types */}
          <section className="mt-14">
            <h2 className="text-2xl font-semibold tracking-tight text-center mb-8">What We Scan For</h2>
            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6">
              {vulnerabilityTypes.map((type, index) => (
                <motion.div
                  key={type.title}
                  initial={{ opacity: 0, y: 20 }}
                  whileInView={{ opacity: 1, y: 0 }}
                  viewport={{ once: true }}
                  transition={{ duration: 0.6, delay: index * 0.1 }}
                  className="rounded-xl border border-white/10 bg-white/5 p-6"
                >
                  <div className="flex items-center gap-3 mb-3">
                    <div className="rounded-md bg-red-500/20 text-red-300 p-2">
                      <type.icon className="h-5 w-5" />
                    </div>
                    <h3 className="font-medium text-sm">{type.title}</h3>
                  </div>
                  <p className="text-xs text-neutral-300">{type.desc}</p>
                </motion.div>
              ))}
            </div>
          </section>

          {/* Call to Action */}
          <section className="mt-14 text-center">
            <div className="rounded-xl border border-white/10 bg-white/5 p-8">
              <h2 className="text-xl font-semibold mb-2">Need Advanced Security Analysis?</h2>
              <p className="text-neutral-300 text-sm mb-6">
                Get comprehensive security reports, automated fixes, and continuous monitoring with CrowmanCloud Pro.
              </p>
              <div className="flex items-center justify-center gap-3">
                <a href="/pricing" className="inline-flex rounded-md px-4 py-2 text-sm bg-brand-500 hover:bg-brand-400 text-white transition">
                  Upgrade to Pro
                </a>
                <a href="/features" className="inline-flex rounded-md px-4 py-2 text-sm bg-white/10 hover:bg-white/20 transition">
                  Learn More
                </a>
              </div>
            </div>
          </section>
        </div>
      </main>
      <Footer />
    </div>
  );
}
